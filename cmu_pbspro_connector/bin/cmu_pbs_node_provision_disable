#!/bin/sh

# (C) Copyright 2012-2013 Altair Engineering, Inc.  All rights reserved.
# This code is provided "as is" without any warranty, express or implied, or
# indemnification of any kind.  All other terms and conditions are as
# specified in the Altair PBS EULA.

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the CMU Management Node.
#  2) Script is executed on the CMU Management Node.

# Purpose:
# This wrapper script is used for enabling or disabling OS provisioning
# within PBS Professional on a list of nodes.

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
   . /etc/pbs.conf
else
    echo "Unable to find /etc/pbs.conf"
    exit 1
fi
# Test
# Simple Usage statement
Usage() {
    cat <<EOF
Usage: `basename $0` nodelist

nodelist can be a space-separated list or a file

EOF
    exit 0
}

while getopts hu opt; do
    case $opt in
        h|u) Usage ;;
    esac
done

# Setting up the variables in the order we are assuming they are passed in.
nodelist=$@    # if used w/ CMU, this will be associated to CMU_TEMP_NODE_FILE

# Check to see if the nodes are provided as a file or a space-separated list of
# nodes names
if [ -f "$nodelist" ] ; then
    cmd=`cat $nodelist`
else
    cmd="$nodelist"
fi

# Verify that the CMU provisioning hook is installed, otherwise we will create this
# automatically or the administrator. We will check every time - just to be sure.
echo "Verifying CMU provision hook is configured in PBS Professional."
echo "Checking cmu_provision_hook exists..."
chk_prov_hook=`${PBS_EXEC}/bin/qmgr -c "print hook cmu_provision" 2>/dev/null`
if [[ -n "${chk_prov_hook}" ]] ; then
    echo "cmu_provision hook EXISTS!"
else
    echo "Creating cmu_provision hook..."
    ${PBS_EXEC}/bin/qmgr -c "create hook cmu_provision event = provision"
    ${PBS_EXEC}/bin/qmgr -c "import hook cmu_provision application/x-python default /opt/cmu/contrib/cmu_pbspro_connector/bin/cmu_pbs_os_provision_hook.py"
    echo "....... DONE"
fi

# Pushing the nodelist through a for-loop to
for node in $cmd ; do
    # Quick check to see if the node even exists in PBS
    node_ans=`$PBS_EXEC/bin/pbsnodes $node 2>/dev/null`

    # If node does exist proceed with enable/disable logic
    # If node does _not_ exist then echo simple error message
    if [ -n "$node_ans" ]; then
        case `basename $0` in
            *enable)    $PBS_EXEC/bin/qmgr -c "set node ${node} provision_enable=true";;
            *disable)   $PBS_EXEC/bin/qmgr -c "set node ${node} provision_enable=false";;
        esac
    else
        echo "Node: $node,  Error: Unknown node"
    fi
done
