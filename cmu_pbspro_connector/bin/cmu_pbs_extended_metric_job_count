#!/bin/bash

# (C) Copyright 2012-2013 Altair Engineering, Inc.  All rights reserved.
# This code is provided "as is" without any warranty, express or implied, or
# indemnification of any kind.  All other terms and conditions are as
# specified in the Altair PBS EULA.

# Assumption:
# This wrapper script assumes
#  1) PBS Server/Scheduler is running on the CMU Management Node.
#  2) Script is executed on the CMU Management Node.

# Purpose:
# This script is used to create a job_count file that organizes
# the registered PBS nodes into buckets based on the number of
# jobs on the node. The job_count file will be used
# as input for the ActionAndAlertsFile.txt
# /opt/cmu/bin/cmu_submit_extended_metrics -f/tmp/job_count

# Source in PBS specific environment variables from pbs.conf
if [ -f /etc/pbs.conf ]; then
    . /etc/pbs.conf
else
    echo "Unable to find /etc/pbs.conf"
    exit 1
fi

# Define CMU_PBSPRO_CONNECTOR, CMU_PATH
CMU_PBSPRO_CONNECTOR=/opt/cmu/contrib/cmu_pbspro_connector
CMU_PATH=/opt/cmu/bin
CMU_SUBMIT_EXTENDED_METRIC=${CMU_PATH}/cmu_submit_extended_metrics

declare -A job_count

state_file=${CMU_PBSPRO_CONNECTOR}/tmp/extended_metric_job_count

rm ${state_file}

node_list=`${PBS_EXEC}/bin/pbsnodes -a | grep "^[[:alnum:]]"`

# Iterate through the registered PBS Professional nodes. If job(s)
# exist on the node, count them. Else set the value to zero.
for n in `echo "${node_list}"` ; do
    jobs=`${PBS_EXEC}/bin/pbsnodes ${n} | grep jobs`
    if [[ -n "$jobs" ]] ; then
        job_ct=`echo $jobs | sed -e 's/jobs = //g' | sed -e 's/, /\n/g' | awk 'BEGIN {FS="/"}; {print $1}' | sort -u | wc -w`
    else
        job_ct=0
    fi
    job_count+=( ["$job_ct"]=" $n" )
done

# Construct the state_file, which will be read in by the
# cmu_submit_extended_metric command
for a in "${!job_count[@]}" ; do
    echo "BEGIN_NODE ${job_count[$a]}
job_count $a" >> ${state_file}
done

# Execute the cmu_submit_extended_metric
${CMU_SUBMIT_EXTENDED_METRIC} -f ${state_file}
